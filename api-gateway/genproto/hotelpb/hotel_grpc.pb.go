// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: protos/hotel-service/hotel.proto

package hotelpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HotelService_ListOfHotel_FullMethodName          = "/HotelService/ListOfHotel"
	HotelService_GetDetailsOfHotel_FullMethodName    = "/HotelService/GetDetailsOfHotel"
	HotelService_GetAvailabilityRooms_FullMethodName = "/HotelService/GetAvailabilityRooms"
)

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	ListOfHotel(ctx context.Context, in *ListOfHotelRequest, opts ...grpc.CallOption) (*ListOfHotelResponse, error)
	GetDetailsOfHotel(ctx context.Context, in *GetDetailsOfHotelRequest, opts ...grpc.CallOption) (*GetDetailsOfHotelResponse, error)
	GetAvailabilityRooms(ctx context.Context, in *GetAvailabilityRoomsRequest, opts ...grpc.CallOption) (*GetAvailabilityRoomsResponse, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) ListOfHotel(ctx context.Context, in *ListOfHotelRequest, opts ...grpc.CallOption) (*ListOfHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOfHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_ListOfHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetDetailsOfHotel(ctx context.Context, in *GetDetailsOfHotelRequest, opts ...grpc.CallOption) (*GetDetailsOfHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailsOfHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_GetDetailsOfHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetAvailabilityRooms(ctx context.Context, in *GetAvailabilityRoomsRequest, opts ...grpc.CallOption) (*GetAvailabilityRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailabilityRoomsResponse)
	err := c.cc.Invoke(ctx, HotelService_GetAvailabilityRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility
type HotelServiceServer interface {
	ListOfHotel(context.Context, *ListOfHotelRequest) (*ListOfHotelResponse, error)
	GetDetailsOfHotel(context.Context, *GetDetailsOfHotelRequest) (*GetDetailsOfHotelResponse, error)
	GetAvailabilityRooms(context.Context, *GetAvailabilityRoomsRequest) (*GetAvailabilityRoomsResponse, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHotelServiceServer struct {
}

func (UnimplementedHotelServiceServer) ListOfHotel(context.Context, *ListOfHotelRequest) (*ListOfHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOfHotel not implemented")
}
func (UnimplementedHotelServiceServer) GetDetailsOfHotel(context.Context, *GetDetailsOfHotelRequest) (*GetDetailsOfHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailsOfHotel not implemented")
}
func (UnimplementedHotelServiceServer) GetAvailabilityRooms(context.Context, *GetAvailabilityRoomsRequest) (*GetAvailabilityRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailabilityRooms not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s grpc.ServiceRegistrar, srv HotelServiceServer) {
	s.RegisterService(&HotelService_ServiceDesc, srv)
}

func _HotelService_ListOfHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOfHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).ListOfHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_ListOfHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).ListOfHotel(ctx, req.(*ListOfHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetDetailsOfHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsOfHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetDetailsOfHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetDetailsOfHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetDetailsOfHotel(ctx, req.(*GetDetailsOfHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetAvailabilityRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailabilityRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetAvailabilityRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetAvailabilityRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetAvailabilityRooms(ctx, req.(*GetAvailabilityRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HotelService_ServiceDesc is the grpc.ServiceDesc for HotelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOfHotel",
			Handler:    _HotelService_ListOfHotel_Handler,
		},
		{
			MethodName: "GetDetailsOfHotel",
			Handler:    _HotelService_GetDetailsOfHotel_Handler,
		},
		{
			MethodName: "GetAvailabilityRooms",
			Handler:    _HotelService_GetAvailabilityRooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/hotel-service/hotel.proto",
}
